// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package signalr

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2802b09fDecodeGithubComPhilippseithSignalr(in *jlexer.Lexer, out *streamItemMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "invocationId":
			out.InvocationID = string(in.String())
		case "item":
			if m, ok := out.Item.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Item.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Item = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2802b09fEncodeGithubComPhilippseithSignalr(out *jwriter.Writer, in streamItemMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"invocationId\":"
		out.RawString(prefix)
		out.String(string(in.InvocationID))
	}
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix)
		if m, ok := in.Item.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Item.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Item))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v streamItemMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2802b09fEncodeGithubComPhilippseithSignalr(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v streamItemMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2802b09fEncodeGithubComPhilippseithSignalr(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *streamItemMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2802b09fDecodeGithubComPhilippseithSignalr(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *streamItemMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2802b09fDecodeGithubComPhilippseithSignalr(l, v)
}
func easyjson2802b09fDecodeGithubComPhilippseithSignalr1(in *jlexer.Lexer, out *invocationMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "target":
			out.Target = string(in.String())
		case "invocationId":
			out.InvocationID = string(in.String())
		case "arguments":
			if in.IsNull() {
				in.Skip()
				out.Arguments = nil
			} else {
				in.Delim('[')
				if out.Arguments == nil {
					if !in.IsDelim(']') {
						out.Arguments = make([]interface{}, 0, 4)
					} else {
						out.Arguments = []interface{}{}
					}
				} else {
					out.Arguments = (out.Arguments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					out.Arguments = append(out.Arguments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "streamIds":
			if in.IsNull() {
				in.Skip()
				out.StreamIds = nil
			} else {
				in.Delim('[')
				if out.StreamIds == nil {
					if !in.IsDelim(']') {
						out.StreamIds = make([]string, 0, 4)
					} else {
						out.StreamIds = []string{}
					}
				} else {
					out.StreamIds = (out.StreamIds)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.StreamIds = append(out.StreamIds, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2802b09fEncodeGithubComPhilippseithSignalr1(out *jwriter.Writer, in invocationMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		out.String(string(in.Target))
	}
	if in.InvocationID != "" {
		const prefix string = ",\"invocationId\":"
		out.RawString(prefix)
		out.String(string(in.InvocationID))
	}
	{
		const prefix string = ",\"arguments\":"
		out.RawString(prefix)
		if in.Arguments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Arguments {
				if v3 > 0 {
					out.RawByte(',')
				}
				if m, ok := v4.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v4.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v4))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.StreamIds) != 0 {
		const prefix string = ",\"streamIds\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.StreamIds {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v invocationMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2802b09fEncodeGithubComPhilippseithSignalr1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v invocationMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2802b09fEncodeGithubComPhilippseithSignalr1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *invocationMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2802b09fDecodeGithubComPhilippseithSignalr1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *invocationMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2802b09fDecodeGithubComPhilippseithSignalr1(l, v)
}
func easyjson2802b09fDecodeGithubComPhilippseithSignalr2(in *jlexer.Lexer, out *hubMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2802b09fEncodeGithubComPhilippseithSignalr2(out *jwriter.Writer, in hubMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v hubMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2802b09fEncodeGithubComPhilippseithSignalr2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v hubMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2802b09fEncodeGithubComPhilippseithSignalr2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *hubMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2802b09fDecodeGithubComPhilippseithSignalr2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *hubMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2802b09fDecodeGithubComPhilippseithSignalr2(l, v)
}
func easyjson2802b09fDecodeGithubComPhilippseithSignalr3(in *jlexer.Lexer, out *handshakeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2802b09fEncodeGithubComPhilippseithSignalr3(out *jwriter.Writer, in handshakeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Error != "" {
		const prefix string = ",\"error\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v handshakeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2802b09fEncodeGithubComPhilippseithSignalr3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v handshakeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2802b09fEncodeGithubComPhilippseithSignalr3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *handshakeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2802b09fDecodeGithubComPhilippseithSignalr3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *handshakeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2802b09fDecodeGithubComPhilippseithSignalr3(l, v)
}
func easyjson2802b09fDecodeGithubComPhilippseithSignalr4(in *jlexer.Lexer, out *handshakeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "protocol":
			out.Protocol = string(in.String())
		case "version":
			out.Version = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2802b09fEncodeGithubComPhilippseithSignalr4(out *jwriter.Writer, in handshakeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v handshakeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2802b09fEncodeGithubComPhilippseithSignalr4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v handshakeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2802b09fEncodeGithubComPhilippseithSignalr4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *handshakeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2802b09fDecodeGithubComPhilippseithSignalr4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *handshakeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2802b09fDecodeGithubComPhilippseithSignalr4(l, v)
}
func easyjson2802b09fDecodeGithubComPhilippseithSignalr5(in *jlexer.Lexer, out *completionMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "invocationId":
			out.InvocationID = string(in.String())
		case "result":
			if m, ok := out.Result.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Result.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Result = in.Interface()
			}
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2802b09fEncodeGithubComPhilippseithSignalr5(out *jwriter.Writer, in completionMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"invocationId\":"
		out.RawString(prefix)
		out.String(string(in.InvocationID))
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if m, ok := in.Result.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Result.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Result))
		}
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v completionMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2802b09fEncodeGithubComPhilippseithSignalr5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v completionMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2802b09fEncodeGithubComPhilippseithSignalr5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *completionMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2802b09fDecodeGithubComPhilippseithSignalr5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *completionMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2802b09fDecodeGithubComPhilippseithSignalr5(l, v)
}
func easyjson2802b09fDecodeGithubComPhilippseithSignalr6(in *jlexer.Lexer, out *closeMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "error":
			out.Error = string(in.String())
		case "allowReconnect":
			out.AllowReconnect = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2802b09fEncodeGithubComPhilippseithSignalr6(out *jwriter.Writer, in closeMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"allowReconnect\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowReconnect))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v closeMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2802b09fEncodeGithubComPhilippseithSignalr6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v closeMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2802b09fEncodeGithubComPhilippseithSignalr6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *closeMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2802b09fDecodeGithubComPhilippseithSignalr6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *closeMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2802b09fDecodeGithubComPhilippseithSignalr6(l, v)
}
func easyjson2802b09fDecodeGithubComPhilippseithSignalr7(in *jlexer.Lexer, out *cancelInvocationMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "invocationId":
			out.InvocationID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2802b09fEncodeGithubComPhilippseithSignalr7(out *jwriter.Writer, in cancelInvocationMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"invocationId\":"
		out.RawString(prefix)
		out.String(string(in.InvocationID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v cancelInvocationMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2802b09fEncodeGithubComPhilippseithSignalr7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v cancelInvocationMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2802b09fEncodeGithubComPhilippseithSignalr7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *cancelInvocationMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2802b09fDecodeGithubComPhilippseithSignalr7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *cancelInvocationMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2802b09fDecodeGithubComPhilippseithSignalr7(l, v)
}
